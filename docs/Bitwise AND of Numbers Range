//Calculate the longest common leftmost bits

//bit mask from rightmost:
public int rangeBitwiseAnd(int m, int n){
    int b = 1 << 31 >> 31;
    while((m & b) != (n & b))   b <<= 1;
    return m & b;
}

public int rangeBitwiseAnd(int m, int n){
    int b = 0;
    for(; m != n; m >>= 1, n >>= 1, b++)    ;
    return m << b;
}


//from leftmost:
public int rangeBitwiseAnd(int m, int n){
    if(m == n)  return m;
    int b = n | n >> 16;
    b |= b >> 8;
    b |= b >> 4;
    b |= b >> 2;
    b |= b >> 1;
    b ^= b >> 1;
    while((m & b) == (n & b))   b |= b >> 1;
    return m & (b & b << 1);
}

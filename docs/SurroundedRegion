//Union-Find
private static final int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
public void solve(char[][] board) {
    if(board == null || board.length == 0)  return;
    int m = board.length, n = board[0].length, size = m * n;
    int[] uf = new int[size+1], sz = new int[size+1];
    sz[size] = 1;
    for(int i = 0; i <= size; i++)  uf[i] = i;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] == 'X')  continue;
            int newest = i * n + j;
            sz[newest] = 1;
            if(i == 0 || j == 0 || i == m - 1 || j == n - 1)    union(uf, sz, newest, size);
            for(int[] dir: directions){
                int ii = i + dir[0], jj = j + dir[1];
                int sur = ii * n + jj;
                if(ii >= 0 && jj >= 0 && ii < m && jj < n && board[ii][jj] == 'O')    union(uf, sz, newest, sur);
            }
        }
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] == 'O' && !isConnect(uf, i * n + j, size))   board[i][j] = 'X';
        }
    }
}
public void union(int[] uf, int[] sz, int i, int j){
    i = find(uf, i);    j = find(uf, j);
    if(i != j){
        if(sz[i] >= sz[j]){
            uf[j] = i;
            sz[i] += sz[j];
        }
        else{
            uf[i] = j;
            sz[j] += sz[i];
        }
    }
}
public int find(int[] uf, int i){
    while(uf[i] != i){
        uf[i] = uf[uf[i]];
        i = uf[i];
    }
    return i;
}
public boolean isConnect(int[] uf, int i, int j){
    return find(uf, i) == find(uf, j);
}
                    
//DFS:
public void solve(char[][] board) {
    if(board == null || board.length == 0)   return;
    int m = board.length, n = board[0].length;
    for(int i = 0; i < m; i++){
        if(board[i][0] == 'O')  dfs(board, i, 0);
        if(board[i][n-1] == 'O') dfs(board, i, n-1);
    }
    for(int i = 0; i < n; i++){
        if(board[0][i] == 'O')  dfs(board, 0, i);
        if(board[m-1][i] == 'O') dfs(board, m-1, i);
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] == 'B')  board[i][j] = 'O';
            else if(board[i][j] == 'O') board[i][j] = 'X';
        }
    }
}
private void dfs(char[][] board, int i, int j){
    if(board[i][j] != 'O')  return;
    board[i][j] = 'B';
    if(i > 1)  dfs(board, i - 1, j);
    if(j > 1)   dfs(board, i, j - 1);
    if(i < board.length - 2)    dfs(board, i + 1, j);
    if(j < board[0].length - 2) dfs(board, i, j + 1);
}

    private static final int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public void solve(char[][] board) {
        if(board == null || board.length == 0)  return;
        int m = board.length, n = board[0].length, size = m * n;
        int[] uf = new int[size], sz = new int[size];
        sz[size] = 1;
        for(int i = 0; i <= size; i++)  uf[i] = i;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 'X')  continue;
                int newest = i * n + j;
                sz[newest] = 1;
                if(i == 0 || j == 0 || i == m - 1 || j == n - 1)    union(uf, sz, newest, size);
                for(int[] dir: directions){
                    i += dir[0];    j += dir[1];
                    int sur = i * n + j;
                    if(i >= 0 && j >= 0 && i < m && j < n && board[i][j] == 'O')    union(uf, sz, newest, sur);
                }
            }
        }
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(board[i][j] == 'O' && !isConnect(uf, i * n + j, size))   board[i][j] = 'X';
            }
        }
    }
    public void union(int[] uf, int[] sz, int i, int j){
        i = find(uf, i);    j = find(uf, j);
        if(i != j){
            if(sz[i] >= sz[j]){
                uf[j] = i;
                sz[i] += sz[j];
            }
            else{
                uf[i] = j;
                sz[j] += sz[i];
            }
        }
    }
    public int find(int[] uf, int i){
        while(uf[i] != i){
            uf[i] = uf[uf[i]];
            i = uf[i];
        }
        return i;
    }
    public boolean isConnect(int[] uf, int i, int j){
        return find(uf, i) == find(uf, j);
    }
                    

//Solution 1:
private static final int LIVE = -1;
private static final int DIE = -2;
public void gameOfLife(int[][] board) {
    if(board == null || board.length == 0)  return;
    int m = board.length, n = board[0].length;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            int count = board[i][j] == 1 ? -1 : 0;
            for(int I = Math.max(i-1, 0); I < Math.min(m, i+2); I++){
                for(int J = Math.max(j-1, 0); J < Math.min(n, j+2); J++)
                    if(board[I][J] == 1 || board[I][J] == DIE)  count++;
            }
            if(board[i][j] == 1 && (count < 2 || count > 3))    board[i][j] = DIE;
            else if(board[i][j] == 0 && count == 3) board[i][j] = LIVE;
        }
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            if(board[i][j] == DIE)  board[i][j] = 0;
            else if(board[i][j] == LIVE)    board[i][j] = 1;
        }
    }
}
                    
                    
//Solution 2: (bit)
public void gameOfLife(int[][] board){
    if(board == null || board.length == 0)  return;
    int m = board.length, n = board[0].length;
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            int count = -board[i][j];
            for(int I = Math.max(0, i-1); I < Math.min(m, i+2); I++){
                for(int J = Math.max(0, j-1); J < Math.min(n, j+2); J++)
                    if((board[I][J] & 1) == 1)  count++;
            }
            if((count | board[i][j]) == 3)  board[i][j] |= 2;
        }
    }
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            board[i][j] >>= 1;
        }
    }
}

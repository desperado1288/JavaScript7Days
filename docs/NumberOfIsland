public List<Integer> numIslands2(int m, int n, int[][] positions) {
        int[][] board = new int[m][n];
        List<Integer> list = new ArrayList<>();
        int num = 0;
        for(int k = 0; k < positions.length; k++){
            int i = positions[k][0], j = positions[k][1];
            List<Integer> templist = new ArrayList<>();
            if(board[i][j] == 0){
                board[i][j] = i * n + j + 1;
                num++;
                if(i > 0 && board[i-1][j] > 0)  templist.add(board[i-1][j]-1);
                if(i < m-1 && board[i+1][j] > 0)    templist.add(board[i+1][j]-1);
                if(j > 0 && board[i][j-1] > 0)  templist.add(board[i][j-1]-1);
                if(j < n-1 && board[i][j+1] > 0)    templist.add(board[i][j+1]-1);
                templist.add(board[i][j] - 1);
                if(templist.size() > 0){
                    for(int p = 1; p < templist.size(); p++){
                        if(union(board, templist.get(0)/n, templist.get(0)%n, templist.get(p)/n, templist.get(p)%n, m, n))    num--;
                    }
                }
            }
            list.add(num);
        }
        return list;
    }
    private int find(int[][] board, int i, int j, int m, int n){
        while(board[i][j] != i * n + j + 1){
            int temp = board[i][j] - 1;
            i = temp / n;
            j = temp % n;
        }
        return board[i][j] - 1;
    }
    private boolean union(int[][] board, int i1, int j1, int i2, int j2, int m, int n){
        int temp1 = find(board, i1, j1, m, n), temp2 = find(board, i2, j2, m, n);
        board[temp2/n][temp2%n] = board[temp1/n][temp1%n];
        return temp1 != temp2;
    }

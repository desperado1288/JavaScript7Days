
private static class UnionFind{
    private int[] uf;
    private int[] sz;
    private int count = 0;
    public UnionFind(int n){
        uf = new int[n];
        sz = new int[n];
    }
    public int size(){return count;}
    public int getValue(int i){return uf[i];}
    public void add(int i){
        uf[i] = i;
        sz[i] = 1;
        count++;
    }
    public int find(int i){
        while(uf[i] != i){
            uf[i] = uf[uf[i]];
            i = uf[i];
        }
        return i;
    }
    public void union(int i, int j){
        i = find(i);    j = find(j);
        if(i != j){
            if(sz[i] > sz[j]){
                uf[j] = i;
                sz[i] += sz[j];
            }
            else{
                uf[i] = j;
                sz[j] += sz[i];
            }
            count--;
        }
    }
}
private static final int[][] directions = new int[][]{{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

public List<Integer> numIslands2(int m, int n, int[][] positions) {
    List<Integer> list = new ArrayList<>();
    if(positions == null || m == 0)  return list;
    UnionFind uf = new UnionFind(m * n + 1);
    for(int[] pos: positions){
        int i = pos[0], j = pos[1], newest = i * n + j + 1;
        if(uf.getValue(newest) == 0){
            uf.add(newest);
            for(int[] dir: directions){
                i += dir[0]; j += dir[1]
                int index = i * n + j + 1;
                if(i < 0 || i >= m || j < 0 || j >= n || uf.getValue(index) == 0)   continue;
                uf.union(newest, index);
            }
        }
        list.add(uf.size());
    }
    return list;
}
    

Array Range -- Mutable:
public class NumArray{
    private static class SegmentTreeNode{
        SegmentTreeNode left = null, right = null;
        int sum = 0, start, end;
        public SegmentTreeNode(int s, int e){
            start = s;
            end = e;
        }
    }
    
    SegmentTreeNode root;
    public NumArray(int[] nums) {
        root = buildTree(nums, 0, nums.length - 1);
    }
    
    private SegmentTreeNode buildTree(int[] nums, int i, int j){
        if(i > j)   return null;
        SegmentTreeNode rt = new SegmentTreeNode(i, j);
        if(i == j)  rt.sum = nums[i];
        else{
            int mid = i + (j - i >> 1);
            rt.left = buildTree(nums, i, mid);
            rt.right = buildTree(nums, mid+1, j);
            rt.sum = rt.left.sum + rt.right.sum;
        }
        return rt;
    }
    
    void update(int i, int val){
        updateTree(root, i, val);
    }
    
    void updateTree(SegmentTreeNode node, int i, int val){
        int s = node.start, e = node.end;
        if(s == e)  node.sum = val;
        else{
            int mid = s + (e - s >> 1);
            if(i <= mid)    updateTree(node.left, i, val);
            else    updateTree(node.right, i, val);
            node.sum = node.left.sum + node.right.sum;
        }
    }
    
    public int sumRange(int i, int j) {
        return sumRangeTree(root, i, j);
    }
    
    private int sumRangeTree(SegmentTreeNode node, int i, int j){
        if(node.start == i && node.end == j)    return node.sum;
        int mid = node.start + (node.end - node.start >> 1);
        if(j <= mid)    return sumRangeTree(node.left, i, j);
        else if(i > mid)    return sumRangeTree(node.right, i, j);
        else    return sumRangeTree(node.left, i, mid) + sumRangeTree(node.right, mid+1, j);
    }
}

Array Range:
public class NumArray{
    private int[] sum;
    public NumArray(int[] nums){
        int n = nums.length;
        sum = new int[n];
        if(n > 0)   sum[0] = nums[0];
        for(int i = 1; i < n; i++)  sum[i] = sum[i-1] + nums[i];
    }
    public int sumRange(int i, int j){
        return sum[j] - (i == 0 ? 0 : sum[i-1]);
    }
}

Matrix Range:
Solution 1:
public class NumMatrix{
    private int[][] sum;
    public NumMatrix(int[][] matrix){
        if(matrix == null || matrix.length == 0)    return;
        int m = matrix.length, n = matrix[0].length;
        sum = new int[m][n];
        sum[0][0] = matrix[0][0];
        for(int i = 1; i < n; i++)  sum[0][i] = matrix[0][i] + sum[0][i-1];
        for(int i = 1; i < m; i++){
            sum[i][0] = matrix[i][0] + sum[i-1][0];
            for(int j = 1; j < n; j++)  sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + matrix[i][j];
        }
    }
    public int sumRegion(int row1, int col1, int row2, int col2){
        return sum[row2][col2] - (row1>0?sum[row1-1][col2]:0) - (col1>0?sum[row2][col1-1]:0) + (row1>0&&col1>0?sum[row1-1][col1-1]:0);
    }
}
    
Solution2:
public class NumMatrix{
    private int[][] sum;
    public NumMatrix(int[][] matrix){
        if(matrix == null || matrix.length == 0)    return;
        int m = matrix.length, n = matrix[0].length;
        sum = new int[m+1][n+1];
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++)
                sum[i][j] = matrix[i-1][j-1] + sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1];
        }
    }
    public int sumRegion(int row1, int col1, int row2, int col2){
        return sum[row2+1][col2+1] - sum[row2+1][col1] - sum[row1][col2+1] + sum[row1][col1];
    }
}

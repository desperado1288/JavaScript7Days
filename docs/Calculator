//Calculator I
public int calculate(String s){
    Stack<Integer> st = new Stack<>();
    int num = 0, sign = 1, result = 0, n = s.length();
    for(int i = 0; i < n; i++){
        char c = s.charAt(i);
        if(c >= '0' && c <= '9')    num = num * 10 + c - '0';
        else if(c == ')'){
            int signPrev = st.pop();
            result = st.pop() + signPrev * (result + sign * num);
            num = 0;
        }
        else if(c == '('){
            st.push(result);    st.push(sign);
            result = 0;     sign = 1;//reset sign inside new parentheses
        }
        else if(c != ' '){
            result += sign * num;
            sign = c == '-' ? -1 : 1;
            num = 0;
        }
    }
    return result + (num != 0 ? sign * num : 0);
}
    
//Calculator II
public int calculate(String s){
    s = s.replace(" ", "");
    int prev = 0, result = 0, n = s.length();
    char sign = '+';
    for(int i = 0; i < n; i++){
        int num = 0;
        while(i < n && s.charAt(i) >= '0' && s.charAt(i) <= '9')    num = 10 * num + s.charAt(i++) - '0';
        if(sign == '+'){
            result += prev;
            prev = num;
        }
        else if(sign == '-'){
            result += prev;
            prev = -num;
        }
        else if(sign == '*')    prev *= num;
        else    prev /= num;
        if(i < n)   sign = s.charAt(i);
        num = 0;
    }
    return result + prev;
}

public int calculate(String s){
    Stack<Integer> st = new Stack<>();
    char sign = '+';
    int num = 0, result = 0, n = s.length();
    for(int i = 0; i < n; i++){
        char c = s.charAt(i);
        if(c >= '0' && c <= '9')    num = 10 * num + c - '0';
        if(!Character.isDigit(c) && c != ' ' || i == n - 1){
            if(sign == '-') st.push(-num);
            else if(sign == '+')    st.push(num);
            else if(sign == '*')    st.push(st.pop() * num);
            else    st.push(st.pop() / num);
            num = 0;
            sign = c;
        }
    }
    while(!st.isEmpty())
        result += st.pop();
    return result;
}
            
        

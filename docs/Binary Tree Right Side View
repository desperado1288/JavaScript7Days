BFS:
public List<Integer> rightSideView(TreeNode root) {
    List<Integer> list = new ArrayList<>();
    if(root == null)    return list;
    Queue<TreeNode> level = new LinkedList<>();
    Queue<TreeNode> next = new LinkedList<>();
    level.add(root);
    while(!level.isEmpty()){
        TreeNode cur = level.poll();
        if(cur.left != null)    next.add(cur.left);
        if(cur.right != null)    next.add(cur.right);
        if(level.isEmpty()){
            list.add(cur.val);
            while(!next.isEmpty())  level.add(nextLevel.poll());
        }
    }
    return list;
}

DFS:
public List<Integer> rightSideView(TreeNode root){
    return dfsFromRight(root, new ArrayList<>(), 0);
}
private List<Integer> dfsFromRight(TreeNode root, List<Integer> list, int depth){
    if(root == null)    return list;
    if(list.size() == depth)    list.add(root.val);
    dfsFromRight(root.right, list, depth + 1);
    dfsFromRight(root.left, list, depth + 1);
    return list;
}
